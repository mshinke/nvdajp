os: Visual Studio 2019
version: "{branch}-{build}"
build_cloud: shuaruta-win-230805

skip_tags: true
branches:
 only:
  - /alphajp.*/
  - /betajp.*/
  - /releasejp.*/

clone_depth: 1

environment:
 PY_PYTHON: 3.7-32

init:
 # - ps: Set-WinSystemLocale ja-JP
 # - ps: Start-Sleep -s 10
 # - ps: Restart-Computer
 # - ps: Start-Sleep -s 10
 # - ps: |
 #    $pythonVersion = (py --version)
 #    echo $pythonVersion
 - set PATH=%PATH%;C:\MinGW;C:\MinGW\bin;C:\MinGW\msys\1.0
 
install:
 - set RELEASE=1
 - set VERSION=2023.2jp
 - set UPDATEVERSIONTYPE=nvdajp
 - for /F "usebackq" %%t in (`jptools\nowdate.cmd`) do set NOWDATE=%%t
 - ps: |
    if ($env:APPVEYOR_REPO_BRANCH.StartsWith("alphajp")) {
        $env:VERSION = "jpalpha_" + $env:NOWDATE
        $env:UPDATEVERSIONTYPE += "alpha"
    } elseif ($env:APPVEYOR_REPO_BRANCH.StartsWith("betajp")) {
        $env:VERSION += "-beta-" + $env:NOWDATE
        $env:UPDATEVERSIONTYPE += "beta"
    } elseif ($env:APPVEYOR_REPO_BRANCH.StartsWith("releasejp")) {
        $env:VERSION += "-" + $env:NOWDATE
    }
    if ($env:APPVEYOR_PROJECT_SLUG -ne "nvdajp") {
        $env:VERSION += "-noncert"
    }
 - set PUBLISHER=nvdajp
 - echo %PUBLISHER% %UPDATEVERSIONTYPE% %VERSION%
 - git submodule update --init --recursive

build_script:
 # - call c:\work\nvda\py3x86env\scripts\activate.bat
 # - pip install -r requirements.txt
 # - pip install typing-extensions
 # - ps: |
 #    $apiVersion = (python -c "import sys; sys.path.append('source'); from addonAPIVersion import CURRENT; print('{}.{}.{}'.format(*CURRENT))")
 #    echo apiversion: $apiVersion
 #    $apiCompatTo = (python -c "import sys; sys.path.append('source'); from addonAPIVersion import BACK_COMPAT_TO; print('{}.{}.{}'.format(*BACK_COMPAT_TO))")
 #    echo apiBackCompatTo: $apiCompatTo
 - ps: |
    & ".\jptools\nonCertBuild1.cmd"
    if ($LastExitCode -eq 0) {
        Write-Output "build1 completed."
    } else {
        Write-Output "An error occurred during build1."
    }
    $sconsArgs = "version_build=$env:APPVEYOR_BUILD_NUMBER"
    & ".\jptools\nonCertBuild2.cmd" $sconsArgs
    if ($LastExitCode -eq 0) {
        Write-Output "build2 completed."
    } else {
        Write-Output "An error occurred during build2."
    }
 # - cd %APPVEYOR_BUILD_FOLDER%
 # - cd jptools
 # - pack_jtalk_addon.cmd
 # - pack_kgs_addon.cmd
 # - cd ..
 # - jptools\buildControllerClient.cmd %sconsArgs%
 # - set PYTHONUTF8=1
 # - jptools\tests.cmd
 # - jpchar\tests.cmd

# artifacts:
#  - path: output\*
#  - path: output\*\*
#  - path: miscDepsJp\jptools\__h1output.txt
#  - path: miscDepsJp\jptools\__h2output.txt
#  - path: miscDepsJp\jptools\__test_log.txt
#  - path: jptools\__jpdictest_log.txt
#  - path: jptools\nvdajp-jtalk-*.nvda-addon
#  - path: jptools\kgsbraille-*.nvda-addon
#  - path: jpchar\__checkchardesc_log.txt

on_success:
 - echo global handler on successful build

on_failure:
 - echo global handler on build failure

on_finish:
 - echo global handler after build failure or success
